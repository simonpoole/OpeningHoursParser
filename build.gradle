/*
 */

plugins {
    id "ca.coglinc.javacc" version "2.4.0"
    id "org.sonarqube" version "3.0"
}

// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'maven-publish'
apply plugin: 'signing'
apply plugin: "jacoco"

version = '0.23.4'

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
    withJavadocJar()
    withSourcesJar()
}

ext {
    javaccOutput = file(project.buildDir.absolutePath + '/generated/javacc/')
    javaccSourcePath = project.buildDir.absolutePath + '/generated/javacc/'
    javaccSource = file(javaccSourcePath)
    mainSource = file('src/main/java/')
    testSource = file('src/test/java/')
}

eclipse {
    classpath {
        file {
            beforeMerged { classpath ->
                classpath.entries.add(new org.gradle.plugins.ide.eclipse.model.SourceFolder(javaccSourcePath, "bin"))
            }
        }
    }
}

idea.module {
    sourceDirs = [javaccSource, mainSource]
}
ideaModule.dependsOn compileJavacc

compileJavacc {
    inputDirectory = mainSource
    outputDirectory = javaccOutput
}

compileJava {
    source javaccSource,mainSource
}

compileTestJava {
    source javaccSource,mainSource,testSource
}

jacocoTestReport {
    reports {
        xml.enabled true
    }
}

sonarqube {
    properties {
        property "sonar.java.source","1.8"
        property "sonar.sourceEncoding","UTF-8"
        property "sonar.java.binaries", "build/classes/java/main/"
        property "sonar.coverage.jacoco.xmlReportPaths","build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml"
        property "sonar.qualitygate.wait", "true"
    }
}

task replaceVersion {
    doLast {
        ant.replaceregexp(match:'ch\\.poole([\\:/])OpeningHoursParser([\\:/])([0-9\\.]+)', replace:"ch.poole\\1OpeningHoursParser\\2${version}", flags:'g', byline:true) {
            fileset(dir: '.', includes: 'README.md')
        }
    }
}
build.dependsOn replaceVersion

task updateTranslations(type: Exec) {
    if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
        commandLine 'cmd', '/c', 'tx.exe', 'pull', '-a'
    } else {
        commandLine 'tx', 'pull', '-a'
    }
}
updateTranslations.group = 'translation'
updateTranslations.description = 'Update translations by executing the transifex tx utility'

task showDifferences(type: JavaExec) {
    main = "ch.poole.openinghoursparser.Diff"
    classpath = sourceSets.test.runtimeClasspath
    args('test-data/oh.txt-result.ocs', 'test-data/oh.txt-result-temp', 'test-data/oh.txt', 'test-data/diff.txt')
}
showDifferences.group = 'verification'
showDifferences.description = "Extract differences between reference test results and current results"

task showDifferencesStrict(type: JavaExec) {
    main = "ch.poole.openinghoursparser.Diff"
    classpath = sourceSets.test.runtimeClasspath
    args('test-data/oh.txt-result-strict.ocs', 'test-data/oh.txt-result-strict-temp', 'test-data/oh.txt', 'test-data/diff-strict.txt')
}
showDifferencesStrict.group = 'verification'
showDifferencesStrict.description = "Extract differences between reference test results and current results in strict mode"

task individualTesting(type: JavaExec) {
    main = "ch.poole.openinghoursparser.IndividualTest"
    classpath = sourceSets.test.runtimeClasspath
    standardInput = System.in
    args('false')
}
individualTesting.group = 'verification'
individualTesting.description = "Individually parsing input strings received directly from terminal for on-the-fly testing"

task individualTestingStrict(type: JavaExec) {
    main = "ch.poole.openinghoursparser.IndividualTest"
    classpath = sourceSets.test.runtimeClasspath
    standardInput = System.in
    args('true')
}
individualTestingStrict.group = 'verification'
individualTestingStrict.description = "Individually parsing input strings received directly from terminal for on-the-fly testing in strict mode"


// test input may change and require rerunning the tests
test.inputs.files("test-data/oh.txt")

ext {
    repoUrl = 'https://github.com/simonpoole/OpeningHoursParser.git'
    spdxId = 'MIT'
}

publishing {
    publications {
        Release(MavenPublication) {
            groupId 'ch.poole'
            artifactId 'OpeningHoursParser'
            artifact jar
            artifact sourcesJar
            artifact javadocJar
            pom {
                name = artifactId
                description = 'This is a simple parser for OSM "opening_hours" tags'    
                url = 'https://github.com/simonpoole/OpeningHoursParser'
                scm {
                    url = repoUrl
                }
                licenses {
                    license {
                        name = spdxId
                        url = 'https://raw.githubusercontent.com/simonpoole/OpeningHoursParser/master/LICENCE.txt'
                    }
                }
                developers {
                    developer {
                        name = 'Simon Poole'
                    }
                }
            }
            repositories {
                maven {
                    name = 'sonatype'
                    credentials {
                        username System.getenv('SONATYPE_USER')
                        password System.getenv('SONATYPE_PASSWORD')
                    }
                    def releasesRepoUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
                    def snapshotsRepoUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
                    url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
                }
            }
        }
    }
}

signing {
    sign publishing.publications.Release
}

// In this section you declare where to find the dependencies of your project
repositories {
    mavenCentral()
}

// In this section you declare the dependencies for your production and test code
dependencies {
    compileOnly 'org.jetbrains:annotations:19.0.0'
    testCompileOnly 'org.jetbrains:annotations:19.0.0'
    testCompile 'junit:junit:4.12'
}

